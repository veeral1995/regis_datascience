library(data.table)
# Import the Edgar Anderson Iris Data
df <- iris
df = data.table(df) # convert to data table
df #Print the dataframe
head(df) # Shows the column names and first 6 rows of data
class(df) # tpye of object
str(df) # structure of object
df[1:5,] # show the first 5 rows and all columns
df[,4] # show all rows and the 4th column.
df[45:50,1:2] # Show rows 45 to 50 and columns 1 through 2.
tail(df) # show last 6 rows and all columns
tail(df[,5]) # show the last 6 rows and the 5th column
summary(df) # many useful statistics
#### Basic Statistical Operations ####
unique(df$Species) # find how many unique species there are in the datatable
min(df$Sepal.Length) # find the minimum septal length
max(df$Sepal.Length[df$Species == 'setosa']) # find the maximum of sepal length of species = setosa
mean(df$Sepal.Length) #average sepal length
median(df$Sepal.Length) # the median petal
var(df$Sepal.Length) # find the variance
sd(df$Sepal.Length) # find the standard deviation of sepal length
hist(df$Sepal.Length, col='purple',main='Histogram of Iris Sepal Lenth', xlab = 'Sepal Length') # histogram of sepal lengths
boxplot(df$Sepal.Length, col='blue', main='Boxplot of Iris Sepal Lenth', xlab = 'Sepal Length', ylab = 'Sepal Length') #box plot of sepal length
boxplot(df) # Box plot of all data
plot(df) # plot all columns vs all columns
plot(df[,1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red", "green3", "blue")[unclass(df$Species)])
# Show the first 3 rows of the data
df[1:3,]
top10 <- df[df$Species=="versicolor"]
top10[1:10,]
head(df)
View(df)
View(df)
versicolor <- df[df$Species=="versicolor"]
setosa <- df[df$Species=="setosa"]
virginica <- df[df$Species=="virginica"]
sd(versicolor$Petal.Length)
sd(setosa$Petal.Length)
sd(virginica$Petal.Length)
max(versicolor$Petal.Width)
max(setosa$Petal.Width)
max(virginica$Petal.Width)
avg(versicolor$Petal.Length)
mean(versicolor$Petal.Length)
mean(setosa$Petal.Length)
mean(virginica$Petal.Length)
verAvgWidth <- mean(versicolor$Petal.Width)
setAvgWidth <- mean(setosa$Petal.Width)
virAvgWidth <- mean(virginica$Petal.Width)
verSepAvgWidth <- mean(versicolor$Sepal.Width)
setSepAvgWidth <- mean(setosa$Petal.Length)
virSepAvgWidth <- mean(virginica$Petal.Length)
print('Hello')
verAvgWidth/verSepAvgWidth
verAvgWidth/verSepAvgWidth
setAvgWidth/setSepAvgWidth
virAvgWidth/virSepAvgWidth
pLenHist <- df$Petal.Length
hist(pLenHist, main="Petal Length Histogram", xlab="Petal Length")
pWidthBox <- df$Petal.Width
boxplot(pWidthBox, main="Box Plot by Petal Width", xlab="Petal Width")
# Show the first 3 rows of the data
df[1:3,]
# Show the first 10 rows of species = versicolor
top10 <- df[df$Species=="versicolor"]
top10[1:10,]
# What is the standard deviation of petal length of each species?
versicolor <- df[df$Species=="versicolor"]
setosa <- df[df$Species=="setosa"]
virginica <- df[df$Species=="virginica"]
sd(versicolor$Petal.Length)
sd(setosa$Petal.Length)
sd(virginica$Petal.Length)
# What is the maximum petal width of each species?
max(versicolor$Petal.Width)
max(setosa$Petal.Width)
max(virginica$Petal.Width)
# What is the average petal length of each species?
mean(versicolor$Petal.Length)
mean(setosa$Petal.Length)
mean(virginica$Petal.Length)
# What is the average petal width to average sepal width ratio for each species?
verAvgWidth <- mean(versicolor$Petal.Width)
setAvgWidth <- mean(setosa$Petal.Width)
virAvgWidth <- mean(virginica$Petal.Width)
verSepAvgWidth <- mean(versicolor$Sepal.Width)
setSepAvgWidth <- mean(setosa$Petal.Length)
virSepAvgWidth <- mean(virginica$Petal.Length)
verAvgWidth/verSepAvgWidth
setAvgWidth/setSepAvgWidth
virAvgWidth/virSepAvgWidth
# Create a histrogram of petal length. Include a title and x-label
pLenHist <- df$Petal.Length
hist(pLenHist, main="Petal Length Histogram", xlab="Petal Length")
# Create a box of petal width. Include a title and x-label
pWidthBox <- df$Petal.Width
boxplot(pWidthBox, main="Box Plot by Petal Width", xlab="Petal Width")
pLenHist <- df$Petal.Length
hist(pLenHist, main="Petal Length Histogram", xlab="Petal Length")
versicolor <- df[df$Species=="versicolor"]
setosa <- df[df$Species=="setosa"]
virginica <- df[df$Species=="virginica"]
sd(versicolor$Petal.Length)
sd(setosa$Petal.Length)
sd(virginica$Petal.Length)
max(versicolor$Petal.Width)
max(setosa$Petal.Width)
max(virginica$Petal.Width)
mean(versicolor$Petal.Length)
mean(setosa$Petal.Length)
mean(virginica$Petal.Length)
verAvgWidth <- mean(versicolor$Petal.Width)
setAvgWidth <- mean(setosa$Petal.Width)
virAvgWidth <- mean(virginica$Petal.Width)
verSepAvgWidth <- mean(versicolor$Sepal.Width)
setSepAvgWidth <- mean(setosa$Petal.Length)
virSepAvgWidth <- mean(virginica$Petal.Length)
verAvgWidth/verSepAvgWidth
setAvgWidth/setSepAvgWidth
virAvgWidth/virSepAvgWidth
verAvgWidth <- mean(versicolor$Petal.Width)
setAvgWidth <- mean(setosa$Petal.Width)
virAvgWidth <- mean(virginica$Petal.Width)
verSepAvgWidth <- mean(versicolor$Sepal.Width)
setSepAvgWidth <- mean(setosa$Sepal.Width)
virSepAvgWidth <- mean(virginica$Sepal.Width)
verAvgWidth/verSepAvgWidth
setAvgWidth/setSepAvgWidth
virAvgWidth/virSepAvgWidth
pWidthBox <- df$Petal.Width
boxplot(pWidthBox, main="Box Plot by Petal Width", xlab="Petal Width")
setwd("C:/Users/vpatel/Desktop/regis_datascience/wk3")
setwd("~/")
setwd("~/")
load("C:/Users/vpatel/Desktop/regis_datascience/wk4/Baseball EDA Walkthrough.R")
setwd("C:/Users/vpatel/Desktop/regis_datascience/wk4")
library(data.table)
library(ggplot2)
bi <- fread('./Binomial.csv')
summary(bi)
sd(bi$V1)
plot(bi$V1, xlab = 'bi Index', ylab = 'bi values', main = 'Scatter plot of the Binomial dataset')
hist(bi$V1, xlab = 'bi values', ylab = 'Frequency of bi values', main = 'Histogram of the Binomial dataset')
boxplot(bi, xlab = 'bi', ylab = 'bi values', main = 'Boxplot of the Binomial dataset')
baseball <- fread('./Baseball Teams.csv')
View(baseball)
baseballByTeam %>% group_by(teamID)
group_by(baseball, teamID)
library(dplyr)
group_by(baseball, teamID)
View(baseball)
baseballRunsMean <- mean(baseball.teamID)
baseballRunsMean <- mean(baseball, teamID)
baseballRunsMean <- mean(baseball$R)
mean(baseball$R)
minimum(baseball$R)
min(baseball$R)
max(baseball$R)
sd(baseball$R)
hist(baseball$R, xlab = 'baseball values', ylab = 'Frequency of bbaseball values', main = 'Histogram of the Baseball Teams dataset')
BN1 <- fread('./BN1.csv')
View(BN1)
View(BN1)
hist(BN1$V1, xlab = 'BN1 values', ylab = 'Frequency of BN1 values', main = 'Histogram of the BN1 dataset')
library(data.table)
hist(BN1$V1, xlab = 'V1 values', ylab = 'Frequency of V1 values', main = 'Histogram of the BN1 dataset')
mean(BN1$V1)
#Min V1 = 24
min(BN1$V1)
#Max V1 = 1220
max(BN1$V1)
#Standard Deviation for V1 = 135.2
sd(BN1$V1)
BN2 <- fread('./BN2.csv')
View(BN2)
hist(BN2$V1, xlab = 'V1 values', ylab = 'Frequency of V1 values', main = 'Histogram of the BN2 dataset')
mean(BN2$V1)
#Min V1 = 1.78
min(BN2$V1)
#Max V1 = 18.61
max(BN2$V1)
#Standard Deviation for V1 = 2
sd(BN2$V1)
ln <- fread('./ln.csv')
View(ln)
hist(ln$V1, xlab = 'V1 values', ylab = 'Frequency of V1 values', main = 'Histogram of the ln dataset')
mean(ln$V1)
#Min V1 = 6.64
min(ln$V1)
#Max V1 = 15.16
max(ln$V1)
#Standard Deviation for V1 = 1
sd(ln$V1)
N1 <- fread('./N1.csv')
View(N1)
hist(ln$V1, xlab = 'V1 values', ylab = 'Frequency of V1 values', main = 'Histogram of the N1 dataset')
hist(N1$V1, xlab = 'V1 values', ylab = 'Frequency of V1 values', main = 'Histogram of the N1 dataset')
#Avg V1 per datasheet = 19
mean(N1$V1)
#Min V1 = 3
min(N1$V1)
#Max V1 = 43
max(N1$V1)
#Standard Deviation for V1 = 4.36
sd(N1$V1)
N2 <- fread('./N2.csv')
hist(N2$V1, xlab = 'V1 values', ylab = 'Frequency of V1 values', main = 'Histogram of the ln dataset')
hist(N2$V1, xlab = 'V1 values', ylab = 'Frequency of V1 values', main = 'Histogram of the N2 dataset')
mean(N2$V1)
#Min V1 = 3
min(N2$V1)
#Max V1 = 43
max(N2$V1)
#Standard Deviation for V1 = 4.36
sd(N2$V1)
sd(baseball$R)
plot(BN1$V1, BN1, pch = 19, col = "black")
plot(BN2$V1, BN2, pch = 19, col = "red") # Equivalent
plot(BN1$V1, pch = 19, col = "black")
plot(BN2$V1, pch = 19, col = "red") # Equivalent
View(BN1)
BN1['x1'] = BN1.index
BN2['x2'] = BN2.index
BN1 <- fread('./BN1.csv')
BN1['x1'] = BN1.index
plot(kind='scatter', x=BN1$V1, y=length(BN1), col="black")
plot(kind='scatter', x=BN1$V1, col="black")
plot(kind='scatter', y=BN1$V1, col="black")
plot(BN1$V1, pch = 19, col = "black")
plot(BN2$V1, pch = 19, col = "red")
plot(BN1$V1, pch = 19, col = "black")
points(BN2$V1, col="red")
boxplot(BN1$V1, BN2$V1)
plot(N1$V1, pch = 19, col = "black")
points(N2$V1, col="red")
boxplot(N1$V1, N2$V1)
library(data.table)
library(caret)
library(corrplot)
library(yardstick)  # used for plotting a confusion matrix
set.seed(42)
filepath <- './'
demo.data <- fread(paste0(filepath, 'demo_data.csv'))
colnames(demo.data) <- c('feature1', 'feature2', 'target')
fwrite(demo.data, paste0(filepath, 'demo_data.csv'))
filepath <- './'
demo.data <- fread(paste0(filepath, 'demo_data.csv'))
setwd("C:/Users/vpatel/Desktop/regis_datascience/wk5")
filepath <- './'
demo.data <- fread(paste0(filepath, 'demo_data.csv'))
colnames(demo.data) <- c('feature1', 'feature2', 'target')
fwrite(demo.data, paste0(filepath, 'demo_data.csv'))
# print first few rows
head(demo.data)
str(demo.data)
filepath <- './'
demo.data <- fread(paste0(filepath, 'demo_data.csv'))
colnames(demo.data) <- c('feature1', 'feature2', 'target')
fwrite(demo.data, paste0(filepath, 'demo_data.csv'))
# print first few rows
head(demo.data)
# look at the structure of the data.table
str(demo.data)
# look at a stats summary
summary(demo.data)
# get number of rows/cols
dim(demo.data)
View(demo.data)
ggplot(data = demo.data, mapping = aes(feature1, feature2)) +
geom_point(mapping = aes(color = factor(target)))
# you might use r-graph-gallery for more ideas of good-looking plots you can make:
# https://www.r-graph-gallery.com/histogram_several_group.html
ggplot(data = demo.data, mapping = aes(feature1, fill=factor(target))) +
geom_histogram(alpha = 0.6, position = 'identity')
ggplot(data = demo.data, mapping = aes(feature2, fill=factor(target))) +
geom_histogram(alpha = 0.6, position = 'identity')
corrplot(cor(demo.data), addCoef.col = "grey")
loan.data <- fread(paste0(filepath, 'loan_data.csv'))
View(loan.data)
ggplot(data = loan.data, mapping = aes(LTV, fill=factor(LOAN_DEFAULT))) +
geom_histogram(alpha = 0.6, position = 'identity')
ggplot(data = loan.data, mapping = aes(PERFORM_CNS_SCORE, fill=factor(LOAN_DEFAULT))) +
geom_histogram(alpha = 0.6, position = 'identity')
corrplot(cor(loan.data), addCoef.col = "grey")
loan.data[, LOAN_DEFAULT:=as.factor(LOAN_DEFAULT)]
loan.data.for.model <- demo.data[, c('LTV', 'LOAN_DEFAULT')]
head(loan.data.for.model)
loan.data[, LOAN_DEFAULT:=as.factor(LOAN_DEFAULT)]
loan.data.for.model <- loan.data[, c('LTV', 'LOAN_DEFAULT')]
head(loan.data.for.model)
model <- train(LOAN_DEFAULT ~ .,
data = loan.data.for.model,
method = "rpart")
model <- train(LOAN_DEFAULT ~ .,
data = loan.data.for.model,
method = "rpart")
install.packages('e1071', dependencies=TRUE)
model <- train(LOAN_DEFAULT ~ .,
data = loan.data.for.model,
method = "rpart")
model
plot(model$finalModel, margin = 0.2)
(model$finalModel)
predictions <- predict(model, loan.data.for.model[, !'LOAN_DEFAULT'])
prediction.dt <- loan.data.for.model[, c('LOAN_DEFAULT')]
prediction.dt <- prediction.dt[, predictions:=as.factor(predictions)]
cm <- conf_mat(data = prediction.dt, truth = LOAN_DEFAULT, estimate = predictions)
autoplot(cm, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1")
loan.data[, LOAN_DEFAULT:=as.factor(LOAN_DEFAULT)]
loan.data.for.model <- loan.data[, c('PERFORM_CNS_SCORE', 'LOAN_DEFAULT')]
head(loan.data.for.model)
model <- train(LOAN_DEFAULT ~ .,
data = loan.data.for.model,
method = "rpart")
model
plot(model$finalModel, margin = 0.2)
text(model$finalModel)
# select all columns but target and make predictions
predictions <- predict(model, loan.data.for.model[, !'LOAN_DEFAULT'])
# select target column as a data.table
prediction.dt <- loan.data.for.model[, c('LOAN_DEFAULT')]
# use in-line data.table assignment operator to make new column
prediction.dt <- prediction.dt[, predictions:=as.factor(predictions)]
cm <- conf_mat(data = prediction.dt, truth = LOAN_DEFAULT, estimate = predictions)
autoplot(cm, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1")
